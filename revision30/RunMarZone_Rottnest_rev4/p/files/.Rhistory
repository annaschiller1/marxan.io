install.packages(c("sp","rgeos","rgdal","maptools"))
library(sp)
library(rgeos)
library(rgdal)
library(maptools)
?readOGR
poly.sp <- readShapePoly("/Users/matthewwatts/Documents/marxan/MPA_Activity/pulayer1km.shp")
class(poly.sp)
poly.sp@data
names(poly.sp)
plot(poly.sp["BESTSOLN"], border=1:5)
plot(poly.sp["BESTSOLN"])
help(plot)
help(spplot)
spplot(poly.sp)
spplot(poly.sp)
spplot(poly.sp["COST"])
spplot(poly.sp["BESTSOLN"])
spplot(poly.sp["SSOLN2"])
spplot(poly.sp["SSOLN2"])
?colorRampPalette
spplot(poly.sp["SSOLN2"],col.regions=colorRampPalette(c("white","blue")))
spplot(poly.sp["SSOLN2"],col.regions=colorRampPalette(c("white","blue"),8))
spplot(poly.sp["SSOLN2"],col.regions=colorRampPalette(c("white","blue"),8))
spplot(poly.sp["SSOLN2"],col.regions=colorRampPalette(c("white","blue")))
spplot(poly.sp["SSOLN2"])
spplot(poly.sp["SSOLN2"],col.regions=colorRampPalette(c("white","blue")))
somecolours <- colorRampPalette(c("white","blue"))
spplot(poly.sp["SSOLN2"],col.regions= somecolours)
spplot(poly.sp["SSOLN2"],col.regions= somecolours)
somecolours
somecolours <- colorRampPalette(c("white","blue")(8))
somecolours <- colorRampPalette(c("white","blue")
)
somecolours
spplot(poly.sp["SSOLN2"], col.regions=cm.colors())
?cm.colors
somecolours <- cm.colors(8)
somecolours
spplot(poly.sp["SSOLN2"], col.regions=cm.colors(8))
spplot(poly.sp["SSOLN2"], col.regions=cm.colors(16))
somecolours <- colorRampPalette(c("white","blue"))(8)
spplot(poly.sp["SSOLN2"],col.regions= somecolours)
somecolours <- colorRampPalette(c("white","blue"))(16)
spplot(poly.sp["SSOLN2"],col.regions= somecolours)
names(poly.sp)
bestcolours <- colorRampPalette(c("white","green"))(4)
spplot(poly.sp["BESTSOLN"],col.regions= bestcolours)
bestcolours <- colorRampPalette(c("white","green"))(2)
spplot(poly.sp["BESTSOLN"],col.regions= bestcolours)
poly.sp <- readShapePoly("/Users/matthewwatts/Documents/marxan/MPA_Activity/pulayer1km.shp")
names(poly.sp)
#------
somecolours <- colorRampPalette(c("white","blue"))(16)
spplot(poly.sp["SSOLN2"],col.regions= somecolours)
bestcolours <- colorRampPalette(c("white","green"))(2)
spplot(poly.sp["BESTSOLN"],col.regions= bestcolours)
spplot(poly.sp["SSOLN2"],col.regions= somecolours,col="transparent")
spplot(poly.sp["BESTSOLN"],col.regions= bestcolours,col="transparent")
install()
install.package()
install.packages()
install.packages('RMySQL')
library(shiny)
runExample("06_tabsets")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny1")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny2")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny2")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny3")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny3")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny2")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny3")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny2")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny1")
runApp("/Users/matthewwatts/Documents/R/MarxanShiny4")
displaymvtable <- function(displayrun,sDir)
{
# where displayrun = 0 means best
#                  = 1..100 means run 1..100
if (displayrun < 1)
{
sFilename <- paste(sDir,"output_mvbest.csv",sep="")
} else {
sFilename <- paste(sDir,"output_mv",sep="")
iPadding <- 5 - nchar(as.character(displayrun))
if (iPadding > 0)
{
for (i in 1:iPadding)
{
sFilename <- paste(sFilename,"0",sep="")
}
}
sFilename <- paste(sFilename,displayrun,".csv",sep="")
}
mvtable <- read.csv(sFilename)
View(mvtable)
}
displaymvtable(0,'/home/ubuntu/MPA_Activity/output/')
displaymvtable(0,'/Users/matthewwatts/Documents/R/MPA_Activity/output/')
displaymvtable(0,'/Users/matthewwatts/Documents/R/MPA_Activity/output/')
View(read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv'))
print("hello world")
return(read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv'))
read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv')
data.frame(read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv'))
read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv')
read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv')
fix(displaymvtable)
print(read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv'))
read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv')
library(xtable)
help(xtable)
xtable(read.csv('/Users/matthewwatts/Documents/R/MPA_Activity/output/output_mvbest.csv'))
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))
employ.data <- data.frame(employee, salary, startdate)
employ.data
print("hello world")
library(shiny)
putable <- read.dbf('/Users/matthewwatts/Documents/R/MPA_Activity/pulayer/pulayer1km.dbf')
install.packages('foreign')
library(foreign)
putable <- read.dbf('/Users/matthewwatts/Documents/R/MPA_Activity/pulayer/pulayer1km.dbf')
putable
writedbf(putable,'/Users/matthewwatts/Documents/R/MPA_Activity/pulayer/pulayer1km_.dbf')
write.dbf(putable,'/Users/matthewwatts/Documents/R/MPA_Activity/pulayer/pulayer1km_.dbf')
pulayer <- readShapePoly("/Users/matthewwatts/Documents/R/MPA_Activity/pulayer/pulayer1km_.shp")
library(sp)
library(maptools) # for readShapePoly
library(sp)
library(maptools)
pulayer <- readShapePoly("/Users/matthewwatts/Documents/R/MPA_Activity/pulayer/pulayer1km_.shp")
displayssolnmap <- function(planningunits,displayzone,fTransparent)
{
# display a summed solution map
# displayzone is the zone we are displaying summed solution for
blueramp <- colorRampPalette(c("white","blue"))(16)
if (isTRUE(fTransparent))
{
spplot(planningunits[paste("SSOLN",displayzone,sep="")],col.regions=blueramp,col="transparent")
} else {
spplot(planningunits[paste("SSOLN",displayzone,sep="")],col.regions=blueramp)
}
}
displaymap <- function(planningunits,displayfield,fTransparent)
{
# display map of a single solution
# 0, best solution
# 1..100, solution X
greenramp <- colorRampPalette(c("white","green"))(2)
if (displayfield<1)
{
# 0, best solution
if (identical(TRUE,fTransparent))
{
spplot(planningunits["BESTSOLN"],col.regions= greenramp,col="transparent")
} else {
spplot(planningunits["BESTSOLN"],col.regions= greenramp)
}
} else {
# 1..100, solution X
if (identical(TRUE,fTransparent))
{
spplot(planningunits[paste("SOLN",displayfield,sep="")],col.regions= greenramp,col="transparent")
} else {
spplot(planningunits[paste("SOLN",displayfield,sep="")],col.regions= greenramp)
}
}
}
#------
#------
displayssolnmap(pulayer,2,TRUE)
displaymap(pulayer,0,TRUE)
# display interactive maps of Marxan software and website users and visitors
library(sp)
library(maptools)
setwd("/Users/matthewwatts/Documents/GlobalMaps/ne_110m_admin_0_countries/")
list.files()
countries110m <- readShapePoly("/Users/matthewwatts/Documents/GlobalMaps/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp.shp")
countries110m <- readShapePoly("ne_110m_admin_0_countries.shp")
spplot(countries110m)
amap <- spplot(countries110m["sovereignt"],col="transparent")
amap + theme(legend.position="none")
# display global map without legend
spplot(countries110m["sovereignt"],col="transparent",colorkey=FALSE)
somecolours <- colorRampPalette(c("white","blue"))(16)
spplot(poly.sp["SSOLN2"],col.regions= somecolours,col="transparent")
install.packages("~/Documents/VTrack_1.0.tar.gz", repos = NULL, type = "source")
source('~/Documents/R/Marxan.R')
soldist <- ClusterUniqueSolutionsVegdist("/Users/matthewwatts/Documents/R/MPA_Activity/output/output_solutionsmatrix.csv")
ClusterPlotNMDS(soldist)
soldist
source('~/Documents/R/Marxan.R')
solutions <- ClusterUniqueSolutionsVegdist("/Users/matthewwatts/Documents/R/MPA_Activity/output/output_solutionsmatrix.csv")
ClusterPlotNMDS(solutions)
ClusterPlotDendogram(solutions)
source('~/Documents/R/Marxan.R')
source('~/Documents/R/Marxan.R')
source('~/Documents/R/Marxan.R')
source('~/Documents/R/Marxan.R')
source('~/Documents/R/Marxan.R')
install.packages("shiny")
library(shiny)
?shiny
install.packages("caTools")
install.packages("doMC")
install.packages("foreign")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("Matrix")
install.packages("mgcv")
install.packages("nlme")
install.packages("Rcpp")
install.packages("rgeos")
install.packages("sp")
install.packages("sp")
source("/Users/matthewwatts/Documents/R/Marxan_rev2.1.R")
sWorkingDir <- "/Users/matthewwatts/Documents/R/rottnest4/p/files/"
ImportOutputsCsvToShpDbf(paste0(sWorkingDir,"pulayer/pulayer.dbf"),
sWorkingDir, 10, 2,"PUID")
sWorkingDir <- "/Users/matthewwatts/Downloads/home/ubuntu/rottnest4/p/files"
setwd(sWorkingDir)
system(paste0("chmod +x ",sWorkingDir,"MarZone_v201_Mac64"))
sWorkingDir <- "/Users/matthewwatts/Downloads/home/ubuntu/rottnest4/p/files/"
setwd(sWorkingDir)
system(paste0("chmod +x ",sWorkingDir,"MarZone_v201_Mac64"))
system(paste0(sWorkingDir,"MarZone_v201_Mac64 -s"))
ImportOutputsCsvToShpDbf(paste0(sWorkingDir,"pulayer/pulayer.dbf"),
sWorkingDir, 10, 2,"PUID")
ImportOutputsCsvToShpDbf(paste0(sWorkingDir,"pulayer/pulayer.DBF"),
sWorkingDir, 10, 3,"PUID")
pulayer <- readShapePoly(paste0(sWorkingDir,"pulayer/pulayer.shp"))
pupolygons <- SpatialPolygons2PolySet(pulayer)
putable <- read.dbf(paste0(sWorkingDir,"/pulayer/pulayer.DBF"))
DisplayMapPBSm(pupolygons,putable,0,c("white","green","blue"),TRUE) # best solution in green
DisplaySsolnMapPBSm(pupolygons,putable,1,100,"blue",TRUE) # reserved zone
DisplaySsolnMapPBSm(pupolygons,putable,1,10,"blue",TRUE) # reserved zone
DisplaySsolnMapPBSm(pupolygons,putable,2,10,"blue",TRUE) # reserved zone
DisplaySsolnMapPBSm(pupolygons,putable,3,10,"blue",TRUE) # reserved zone
DisplayMapPBSm(pupolygons,putable,0,c("green","blue","white"),TRUE) # best solution in green
DisplayMapPBSm(pupolygons,putable,0,c("blue","white","green"),TRUE) # best solution in green
DisplayMapPBSm(pupolygons,putable,0,c("red","green","blue"),TRUE) # best solution in green
displayfield <- 0
colourpalette <- c("red","green","blue")
fTransparent <- TRUE
# display map of a single solution
# 0, best solution
# 1..100, solution X
if (displayfield<1)
{
values <- sqldf("SELECT BESTSOLN from putable")
} else {
values <- sqldf(paste0("SELECT SOLN",displayfield," from putable"))
}
values
head(values)
source("/Users/matthewwatts/Documents/R/Marxan_rev2.1.R")
ImportOutputsCsvToShpDbf(paste0(sWorkingDir,"pulayer/pulayer.DBF"),
sWorkingDir, 10, 3,"PUID")
pulayer <- readShapePoly(paste0(sWorkingDir,"pulayer/pulayer.shp"))
pupolygons <- SpatialPolygons2PolySet(pulayer)
putable <- read.dbf(paste0(sWorkingDir,"/pulayer/pulayer.DBF"))
DisplayMapPBSm(pupolygons,putable,0,c("red","green","blue"),TRUE) # best solution in green
values <- sqldf("SELECT BESTSOLN from putable")
head(values)
